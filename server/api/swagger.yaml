openapi: 3.0.1
info:
  title: Jabberwocky
  description: Draft version
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
servers:
- url: https://localhost:8080/v0
paths:
  /connector:
    get:
      summary: Find all connectors
      description: Returns a list of connector
      operationId: getConnectors
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connector'
                x-content-type: application/json
    put:
      summary: Update an existing connector
      operationId: updateConnector
      requestBody:
        description: Connector object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connector'
        required: true
      responses:
        "400":
          description: Invalid name supplied
          content: {}
        "404":
          description: Connector not found
          content: {}
        "405":
          description: Validation exception
          content: {}
    post:
      summary: Add a new connector
      operationId: addConnector
      requestBody:
        description: Connector object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connector'
        required: true
      responses:
        "405":
          description: Invalid input
          content: {}
  /connector/{connectorName}:
    get:
      summary: Find connector by name
      description: Returns a single connector
      operationId: getConnectorByName
      parameters:
      - name: connectorName
        in: path
        description: Name of connector to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
        "400":
          description: Invalid name supplied
          content: {}
        "404":
          description: Connector not found
          content: {}
  /channel:
    get:
      summary: Find all channels
      description: Returns a list of channels
      operationId: getChannels
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
                x-content-type: application/json
    put:
      summary: Update an existing channel
      operationId: updateChannel
      requestBody:
        description: Channel object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
        required: true
      responses:
        "400":
          description: Invalid name supplied
          content: {}
        "404":
          description: Channel not found
          content: {}
        "405":
          description: Validation exception
          content: {}
    post:
      summary: Add a new channel
      operationId: addChannel
      requestBody:
        description: Channel object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
        required: true
      responses:
        "405":
          description: Invalid input
          content: {}
  /channel/{channelName}:
    get:
      summary: Find channel by name
      description: Returns a single channel
      operationId: getChannelByName
      parameters:
      - name: channelName
        in: path
        description: Name of channel to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        "400":
          description: Invalid name supplied
          content: {}
        "404":
          description: Channel not found
          content: {}
  /eventsource:
    get:
      summary: Find all event sources
      description: Returns a list of event sources
      operationId: getEventSources
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventSource'
                x-content-type: application/json
    put:
      summary: Update an existing event source
      operationId: updateEventSource
      requestBody:
        description: Event source object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSource'
        required: true
      responses:
        "400":
          description: Invalid name supplied
          content: {}
        "404":
          description: EventSource not found
          content: {}
        "405":
          description: Validation exception
          content: {}
    post:
      summary: Add a new event source
      operationId: addEventSource
      requestBody:
        description: Event source object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSource'
        required: true
      responses:
        "405":
          description: Invalid input
          content: {}
  /eventsource/{eventSourceName}:
    get:
      summary: Find event source by name
      description: Returns a single event source
      operationId: getEventSourceByName
      parameters:
      - name: eventSourceName
        in: path
        description: Name of event source to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSource'
        "400":
          description: Invalid name supplied
          content: {}
        "404":
          description: EventSource not found
          content: {}
  /eventsource/{eventSourceName}/log:
    get:
      summary: Log the output of event source integration
      description: Returns the log output
      operationId: getEventSourceLogByName
      parameters:
      - name: eventSourceName
        in: path
        description: Name of event source to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Some log trace
        "400":
          description: Invalid name supplied
          content: {}
        "404":
          description: EventSink not found
          content: {}           
  /eventsink:
    get:
      summary: Find all event sinks
      description: Returns a list of event sinks
      operationId: getEventSinks
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventSink'
                x-content-type: application/json
    put:
      summary: Update an existing event sink
      operationId: updateEventSink
      requestBody:
        description: Event sink object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSink'
        required: true
      responses:
        "400":
          description: Invalid name supplied
          content: {}
        "404":
          description: EventSink not found
          content: {}
        "405":
          description: Validation exception
          content: {}
    post:
      summary: Add a new event sink
      operationId: addEventSink
      requestBody:
        description: Event sink object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSink'
        required: true
      responses:
        "405":
          description: Invalid input
          content: {}
  /eventsink/{eventSinkName}:
    get:
      summary: Find event sink by name
      description: Returns a single event sink
      operationId: getEventSinkByName
      parameters:
      - name: eventSinkName
        in: path
        description: Name of event sink to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSink'
        "400":
          description: Invalid name supplied
          content: {}
        "404":
          description: EventSink not found
          content: {}
  /eventsink/{eventSinkName}/log:
    get:
      summary: Log the output of event sink integration
      description: Returns the log output
      operationId: getEventSinkLogByName
      parameters:
      - name: eventSinkName
        in: path
        description: Name of event sink to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Some log trace
        "400":
          description: Invalid name supplied
          content: {}
        "404":
          description: EventSink not found
          content: {}          
components:
  schemas:
    Property:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          example: my-key
        value:
          type: string
          example: my-value
      example:
        name: my-key
        value: my-value
    Connector:
      required:
      - configuration
      - name
      - type
      type: object
      properties:
        name:
          type: string
          example: my-connector
        type:
          type: string
          description: connector type, either source or sink
          enum:
          - source
          - sink
        properties:
          type: array
          items:
            type: string
        eventSourceInstances:
          type: array
          description: the list of running event source instances
          items:
            $ref: '#/components/schemas/EventSource'
        eventSinksInstances:
          type: array
          description: the list of running event sinks instances
          items:
            $ref: '#/components/schemas/EventSink'            
        configuration:
          type: string
          example: TODO put a simple valid yaml configuration
      example:
        configuration: TODO put a simple valid yaml configuration
        name: my-connector
        type: source
    Channel:
      required:
      - configuration
      - name
      - type
      type: object
      properties:
        name:
          type: string
          example: my-channel
        type:
          type: string
          description: the channel type, a knative destination, a kafka topic or a
            generic URI
        configuration:
          type: string
          example: TODO put a simple valid yaml configuration
        eventSources:
          type: array
          description: the list of event source bound
          items:
            $ref: '#/components/schemas/EventSource'
        eventSinks:
          type: array
          description: the list of event sink bound
          items:
            $ref: '#/components/schemas/EventSink'            
      example:
        configuration: TODO put a simple valid yaml configuration
        name: my-channel
        type: type
    EventSource:
      $ref: '#/components/schemas/EventSourceOrSink'
    EventSink:
      $ref: '#/components/schemas/EventSourceOrSink'
    EventSourceOrSink:
      required:
      - channelRef
      - connectorRef
      - name
      type: object
      properties:
        name:
          type: string
          example: my-event-source
        connectorRef:
          type: string
          description: the connector which produce/consume the events
        channelRef:
          type: string
          example: then channel where/from to publish/consume events
        properties:
          type: array
          description: the list of properties required by the connector
          items:
            $ref: '#/components/schemas/Property'
      description: abstract object that can represent either an event source or event
        sink
      example:
        connectorRef: my-connector
        name: my-event-source
        channelRef: my-channel
        properties:
        - name: my-key
          value: my-value
        - name: my-key
          value: my-value
